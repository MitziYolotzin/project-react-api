{"version":3,"sources":["static/pokemon.svg","App.js","graphql/queries.js","components/CardPokemon.js","components/ListPokemons.js","components/Pokemon.js","components/SearchForm.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","pokeball","alt","to","class","getPokemons","gql","CardPokemon","item","image","name","types","ListPokemons","useQuery","loading","data","error","pokemons","map","pokemon","index","key","getPokemon","Pokemon","variables","id","SearchForm","useState","searchInput","setSearchInput","type","placeholder","value","onChange","e","valueInput","target","Boolean","window","location","hostname","match","client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,qC,kOCmB5BC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAUF,UAAU,WAAWG,IAAI,aAC7C,wEACA,kBAAC,IAAD,CAAMC,GAAG,YACP,4BAAQC,MAAM,6BAAd,a,0MCTH,IAAMC,EAAcC,YAAH,K,QCDXC,EAAc,SAACC,GAAU,IAC5BC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACrB,OACE,yBAAKZ,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,oBAChB,yBAAKG,IAAI,UAAUF,IAAKS,MAG5B,yBAAKV,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,cAAcW,GAC3B,uBAAGX,UAAU,iBAAiBY,QCR7BC,G,MAAe,WAAO,IAAD,EACCC,YAASR,GAAlCS,EADwB,EACxBA,QAASC,EADe,EACfA,KAAMC,EADS,EACTA,MACvB,OAAIF,EAEA,yBAAKf,UAAU,eACZ,IACD,4BAAQK,MAAM,sCAAd,WAAoE,KAGtEY,EAAa,UAAN,OAAiBA,GAG1B,yBAAKjB,UAAU,kBACZgB,EAAKE,SAASC,KAAI,SAACC,EAASC,GAAV,OACjB,kBAAC,EAAD,eAAaC,IAAKD,GAAWD,U,wKCjBrC,IAAMG,EAAahB,YAAH,KAWHiB,EAAU,SAAAJ,GAAY,IAAD,EACCN,YAASS,EAAY,CAAEE,UAAW,CAAEC,GAAIN,EAAQM,GAAIf,KAAMS,EAAQT,QAA3FI,EADwB,EACxBA,QAASC,EADe,EACfA,KAAMC,EADS,EACTA,MACvB,OAAIF,EAAgB,GAChBE,EAAa,UAAN,OAAiBA,GAE1B,yBAAKjB,UAAU,OACX,yBAAKA,UAAU,QACb,yBAAKA,UAAU,WACb,yBAAKC,IAAKe,EAAKI,QAAQV,MAAOP,IAAG,UAAKa,EAAKI,QAAQT,QACnD,4BAAKK,EAAKI,QAAQT,MAClB,2BAAIK,EAAKI,QAAQR,W,QCvBhBe,EAAa,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACvBC,EADuB,KACVC,EADU,KAM9B,OACE,yBAAK9B,UAAU,kBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,2BACEA,UAAU,QACV+B,KAAK,OACLC,YAAY,iBACZC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAbEC,EAakBD,EAAEE,OAAOJ,WAZ/CH,EAAeM,GADI,IAACA,MAgBhB,yBAAKpC,UAAU,WACb,4BAAQA,UAAU,kBAAlB,cCTUsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFN,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,KAAM,IAAIC,IAAS,CAAEC,IAAK,oCAC1BC,MAAO,IAAIC,MAGbC,IAASC,OACP,kBAAC,IAAD,CAAgBR,OAAQA,GACtB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAKS,KAAK,MACV,kBAAC,EAAD,CAAcA,KAAK,aACnB,kBAAC,EAAD,CAASA,KAAK,gBACd,kBAAC,EAAD,CAAYA,KAAK,aAGrBC,SAASC,eAAe,SDqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.8a21ce7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.6058de96.svg\";","import React from \"react\";\nimport pokeball from \"./static/pokemon.svg\";\nimport \"./App.css\";\nimport { Link } from \"@reach/router\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={pokeball} className=\"pokeball\" alt=\"pokeball\" />\n        <h1>Hello! What is your favorite Pok√©mon?</h1>\n        <Link to=\"pokemons\">\n          <button class=\"button is-link is-rounded\">Enter</button>\n        </Link>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { gql } from \"apollo-boost\";\n\n\nexport const getPokemons = gql`{\n\n    pokemons(first: 120) {\n        id\n        number\n        name\n        image\n        types\n    }\n}\n\n`;","import React from \"react\";\n\nexport const CardPokemon = (item) => {\n  const { image, name, types } = item;\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-128x128\">\n          <img alt=\"pokemon\" src={image} />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-content\">\n            <p className=\"title is-4\">{name}</p>\n            <p className=\"subtitle is-6\">{types}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { getPokemons } from \"../graphql/queries\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { CardPokemon } from \"./CardPokemon\";\nimport \"bulma/css/bulma.css\";\n\nexport const ListPokemons = () => {\n  const { loading, data, error } = useQuery(getPokemons);\n  if (loading)\n    return (\n      <div className=\"button-load\">\n        {\" \"}\n        <button class=\"button is-link is-loading is-large\">Loading</button>{\" \"}\n      </div>\n    );\n  if (error) return `Error: ${error}`;\n\n  return (\n    <div className=\"container-list\">\n      {data.pokemons.map((pokemon, index) => (\n        <CardPokemon key={index} {...pokemon} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react'\nimport { gql } from 'apollo-boost'\nimport { useQuery } from '@apollo/react-hooks'\n\nconst getPokemon = gql`\n  {\n    pokemon(name: \"Pikachu\") {\n      id\n      name\n      image\n      types\n    }\n  }\n`\n\nexport const Pokemon = pokemon => {\n  const { loading, data, error } = useQuery(getPokemon, { variables: { id: pokemon.id, name: pokemon.name}} )\n  if (loading) return ''\n  if (error) return `Error: ${error}`\n  return (\n    <div className='App'>\n        <div className=\"card\">\n          <div className=\"content\">\n            <img src={data.pokemon.image} alt={`${data.pokemon.name}`}/>\n            <h1>{data.pokemon.name}</h1>\n            <p>{data.pokemon.types}</p>\n          </div>\n        </div>\n    </div>\n  )\n}","import React, { useState } from \"react\";\n\nexport const SearchForm = () => {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const handleChange = (valueInput) => {\n    setSearchInput(valueInput);\n  };\n\n  return (\n    <div className=\"search-pokemon\">\n      <div className=\"field has-addons\">\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"Find a Pokemon\"\n            value={searchInput}\n            onChange={(e) => handleChange(e.target.value)}\n          />\n        </div>\n        <div className=\"control\">\n          <button className=\"button is-info\">Search</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ApolloClient, HttpLink, InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport { ListPokemons } from \"./components/ListPokemons.js\";\nimport { Pokemon } from \"./components/Pokemon\";\nimport { SearchForm } from \"./components/SearchForm\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Router } from \"@reach/router\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({ uri: \"https://graphql-pokemon.now.sh/\" }),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App path=\"/\" />\n      <ListPokemons path=\"pokemons\" />\n      <Pokemon path=\"pokemon/:id\" />\n      <SearchForm path=\"search\" />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}